# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sctest', [dirname(__file__)])
        except ImportError:
            import _sctest
            return _sctest
        if fp is not None:
            try:
                _mod = imp.load_module('_sctest', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _sctest = swig_import_helper()
    del swig_import_helper
else:
    import _sctest
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FE_HAS_SIGNAL = _sctest.FE_HAS_SIGNAL
FE_HAS_CARRIER = _sctest.FE_HAS_CARRIER
FE_HAS_VITERBI = _sctest.FE_HAS_VITERBI
FE_HAS_SYNC = _sctest.FE_HAS_SYNC
FE_HAS_LOCK = _sctest.FE_HAS_LOCK
FE_TIMEDOUT = _sctest.FE_TIMEDOUT
FE_REINIT = _sctest.FE_REINIT
class eSctest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eSctest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eSctest, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sctest.new_eSctest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sctest.delete_eSctest
    __del__ = lambda self : None;
    def check_smart_card(self, *args): return _sctest.eSctest_check_smart_card(self, *args)
    def VFD_Open(self): return _sctest.eSctest_VFD_Open(self)
    def VFD_Close(self): return _sctest.eSctest_VFD_Close(self)
    def turnon_VFD(self): return _sctest.eSctest_turnon_VFD(self)
    def turnoff_VFD(self): return _sctest.eSctest_turnoff_VFD(self)
    def getFrontendstatus(self, *args): return _sctest.eSctest_getFrontendstatus(self, *args)
    __swig_getmethods__["getInstance"] = lambda x: _sctest.eSctest_getInstance
    if _newclass:getInstance = staticmethod(_sctest.eSctest_getInstance)
eSctest_swigregister = _sctest.eSctest_swigregister
eSctest_swigregister(eSctest)

def eSctest_getInstance():
  return _sctest.eSctest_getInstance()
eSctest_getInstance = _sctest.eSctest_getInstance

SCI_CLASS_A = _sctest.SCI_CLASS_A
SCI_CLASS_B = _sctest.SCI_CLASS_B
SCI_CLASS_AB = _sctest.SCI_CLASS_AB
SCI_NUMBER_OF_CONTROLLERS = _sctest.SCI_NUMBER_OF_CONTROLLERS
SCI_BUFFER_SIZE = _sctest.SCI_BUFFER_SIZE
SCI_CLOCK_STOP_DISABLED = _sctest.SCI_CLOCK_STOP_DISABLED
SCI_CLOCK_STOP_LOW = _sctest.SCI_CLOCK_STOP_LOW
SCI_CLOCK_STOP_HIGH = _sctest.SCI_CLOCK_STOP_HIGH
SCI_MAX_ATR_SIZE = _sctest.SCI_MAX_ATR_SIZE
SCI_MAX_F = _sctest.SCI_MAX_F
SCI_MAX_ETU = _sctest.SCI_MAX_ETU
SCI_MAX_WWT = _sctest.SCI_MAX_WWT
SCI_MAX_CWT = _sctest.SCI_MAX_CWT
SCI_MAX_BWT = _sctest.SCI_MAX_BWT
SCI_MAX_EGT = _sctest.SCI_MAX_EGT
SCI_MIN_F = _sctest.SCI_MIN_F
SCI_MIN_ETU = _sctest.SCI_MIN_ETU
SCI_MIN_WWT = _sctest.SCI_MIN_WWT
SCI_MIN_CWT = _sctest.SCI_MIN_CWT
SCI_MIN_BWT = _sctest.SCI_MIN_BWT
SCI_MIN_EGT = _sctest.SCI_MIN_EGT
SCI_SYNC = _sctest.SCI_SYNC
SCI_DATA_ANY = _sctest.SCI_DATA_ANY
RFU = _sctest.RFU
SCI_ERROR_OK = _sctest.SCI_ERROR_OK
SCI_ERROR_DRIVER_NOT_INITIALIZED = _sctest.SCI_ERROR_DRIVER_NOT_INITIALIZED
SCI_ERROR_FAIL = _sctest.SCI_ERROR_FAIL
SCI_ERROR_KERNEL_FAIL = _sctest.SCI_ERROR_KERNEL_FAIL
SCI_ERROR_NO_ATR = _sctest.SCI_ERROR_NO_ATR
SCI_ERROR_TS_CHARACTER_INVALID = _sctest.SCI_ERROR_TS_CHARACTER_INVALID
SCI_ERROR_LRC_FAIL = _sctest.SCI_ERROR_LRC_FAIL
SCI_ERROR_CRC_FAIL = _sctest.SCI_ERROR_CRC_FAIL
SCI_ERROR_LENGTH_FAIL = _sctest.SCI_ERROR_LENGTH_FAIL
SCI_ERROR_PARITY_FAIL = _sctest.SCI_ERROR_PARITY_FAIL
SCI_ERROR_RX_OVERFLOW_FAIL = _sctest.SCI_ERROR_RX_OVERFLOW_FAIL
SCI_ERROR_TX_OVERFLOW_FAIL = _sctest.SCI_ERROR_TX_OVERFLOW_FAIL
SCI_ERROR_TX_UNDERRUN_FAIL = _sctest.SCI_ERROR_TX_UNDERRUN_FAIL
SCI_ERROR_CARD_NOT_PRESENT = _sctest.SCI_ERROR_CARD_NOT_PRESENT
SCI_ERROR_CARD_NOT_ACTIVATED = _sctest.SCI_ERROR_CARD_NOT_ACTIVATED
SCI_ERROR_AWT_TIMEOUT = _sctest.SCI_ERROR_AWT_TIMEOUT
SCI_ERROR_WWT_TIMEOUT = _sctest.SCI_ERROR_WWT_TIMEOUT
SCI_ERROR_CWT_TIMEOUT = _sctest.SCI_ERROR_CWT_TIMEOUT
SCI_ERROR_BWT_TIMEOUT = _sctest.SCI_ERROR_BWT_TIMEOUT
SCI_ERROR_PARAMETER_OUT_OF_RANGE = _sctest.SCI_ERROR_PARAMETER_OUT_OF_RANGE
SCI_ERROR_TRANSACTION_ABORTED = _sctest.SCI_ERROR_TRANSACTION_ABORTED
SCI_ERROR_CLOCK_STOP_DISABLED = _sctest.SCI_ERROR_CLOCK_STOP_DISABLED
SCI_ERROR_TX_PENDING = _sctest.SCI_ERROR_TX_PENDING
SCI_ERROR_ATR_PENDING = _sctest.SCI_ERROR_ATR_PENDING
class SCI_MODES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCI_MODES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCI_MODES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["emv2000"] = _sctest.SCI_MODES_emv2000_set
    __swig_getmethods__["emv2000"] = _sctest.SCI_MODES_emv2000_get
    if _newclass:emv2000 = _swig_property(_sctest.SCI_MODES_emv2000_get, _sctest.SCI_MODES_emv2000_set)
    __swig_setmethods__["dma"] = _sctest.SCI_MODES_dma_set
    __swig_getmethods__["dma"] = _sctest.SCI_MODES_dma_get
    if _newclass:dma = _swig_property(_sctest.SCI_MODES_dma_get, _sctest.SCI_MODES_dma_set)
    __swig_setmethods__["man_act"] = _sctest.SCI_MODES_man_act_set
    __swig_getmethods__["man_act"] = _sctest.SCI_MODES_man_act_get
    if _newclass:man_act = _swig_property(_sctest.SCI_MODES_man_act_get, _sctest.SCI_MODES_man_act_set)
    __swig_setmethods__["rw_mode"] = _sctest.SCI_MODES_rw_mode_set
    __swig_getmethods__["rw_mode"] = _sctest.SCI_MODES_rw_mode_get
    if _newclass:rw_mode = _swig_property(_sctest.SCI_MODES_rw_mode_get, _sctest.SCI_MODES_rw_mode_set)
    def __init__(self): 
        this = _sctest.new_SCI_MODES()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sctest.delete_SCI_MODES
    __del__ = lambda self : None;
SCI_MODES_swigregister = _sctest.SCI_MODES_swigregister
SCI_MODES_swigregister(SCI_MODES)

class SCI_PARAMETERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCI_PARAMETERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCI_PARAMETERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["T"] = _sctest.SCI_PARAMETERS_T_set
    __swig_getmethods__["T"] = _sctest.SCI_PARAMETERS_T_get
    if _newclass:T = _swig_property(_sctest.SCI_PARAMETERS_T_get, _sctest.SCI_PARAMETERS_T_set)
    __swig_setmethods__["FI"] = _sctest.SCI_PARAMETERS_FI_set
    __swig_getmethods__["FI"] = _sctest.SCI_PARAMETERS_FI_get
    if _newclass:FI = _swig_property(_sctest.SCI_PARAMETERS_FI_get, _sctest.SCI_PARAMETERS_FI_set)
    __swig_setmethods__["ETU"] = _sctest.SCI_PARAMETERS_ETU_set
    __swig_getmethods__["ETU"] = _sctest.SCI_PARAMETERS_ETU_get
    if _newclass:ETU = _swig_property(_sctest.SCI_PARAMETERS_ETU_get, _sctest.SCI_PARAMETERS_ETU_set)
    __swig_setmethods__["WWT"] = _sctest.SCI_PARAMETERS_WWT_set
    __swig_getmethods__["WWT"] = _sctest.SCI_PARAMETERS_WWT_get
    if _newclass:WWT = _swig_property(_sctest.SCI_PARAMETERS_WWT_get, _sctest.SCI_PARAMETERS_WWT_set)
    __swig_setmethods__["CWT"] = _sctest.SCI_PARAMETERS_CWT_set
    __swig_getmethods__["CWT"] = _sctest.SCI_PARAMETERS_CWT_get
    if _newclass:CWT = _swig_property(_sctest.SCI_PARAMETERS_CWT_get, _sctest.SCI_PARAMETERS_CWT_set)
    __swig_setmethods__["BWT"] = _sctest.SCI_PARAMETERS_BWT_set
    __swig_getmethods__["BWT"] = _sctest.SCI_PARAMETERS_BWT_get
    if _newclass:BWT = _swig_property(_sctest.SCI_PARAMETERS_BWT_get, _sctest.SCI_PARAMETERS_BWT_set)
    __swig_setmethods__["EGT"] = _sctest.SCI_PARAMETERS_EGT_set
    __swig_getmethods__["EGT"] = _sctest.SCI_PARAMETERS_EGT_get
    if _newclass:EGT = _swig_property(_sctest.SCI_PARAMETERS_EGT_get, _sctest.SCI_PARAMETERS_EGT_set)
    __swig_setmethods__["clock_stop_polarity"] = _sctest.SCI_PARAMETERS_clock_stop_polarity_set
    __swig_getmethods__["clock_stop_polarity"] = _sctest.SCI_PARAMETERS_clock_stop_polarity_get
    if _newclass:clock_stop_polarity = _swig_property(_sctest.SCI_PARAMETERS_clock_stop_polarity_get, _sctest.SCI_PARAMETERS_clock_stop_polarity_set)
    __swig_setmethods__["check"] = _sctest.SCI_PARAMETERS_check_set
    __swig_getmethods__["check"] = _sctest.SCI_PARAMETERS_check_get
    if _newclass:check = _swig_property(_sctest.SCI_PARAMETERS_check_get, _sctest.SCI_PARAMETERS_check_set)
    __swig_setmethods__["P"] = _sctest.SCI_PARAMETERS_P_set
    __swig_getmethods__["P"] = _sctest.SCI_PARAMETERS_P_get
    if _newclass:P = _swig_property(_sctest.SCI_PARAMETERS_P_get, _sctest.SCI_PARAMETERS_P_set)
    __swig_setmethods__["I"] = _sctest.SCI_PARAMETERS_I_set
    __swig_getmethods__["I"] = _sctest.SCI_PARAMETERS_I_get
    if _newclass:I = _swig_property(_sctest.SCI_PARAMETERS_I_get, _sctest.SCI_PARAMETERS_I_set)
    __swig_setmethods__["U"] = _sctest.SCI_PARAMETERS_U_set
    __swig_getmethods__["U"] = _sctest.SCI_PARAMETERS_U_get
    if _newclass:U = _swig_property(_sctest.SCI_PARAMETERS_U_get, _sctest.SCI_PARAMETERS_U_set)
    def __init__(self): 
        this = _sctest.new_SCI_PARAMETERS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sctest.delete_SCI_PARAMETERS
    __del__ = lambda self : None;
SCI_PARAMETERS_swigregister = _sctest.SCI_PARAMETERS_swigregister
SCI_PARAMETERS_swigregister(SCI_PARAMETERS)

SCI_WITHOUT_ATR = _sctest.SCI_WITHOUT_ATR
SCI_ATR_READY = _sctest.SCI_ATR_READY


